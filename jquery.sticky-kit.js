// Generated by CoffeeScript 1.4.0
(function() {
  var $, win;

  $ = this.jQuery || this.Zepto;

  win = $(window);

  $.fn.stick_in_parent = function(parent_selector) {
    var elm, sticky_class, _fn, _i, _len;
    sticky_class = "is_stuck";
    _fn = function(elm) {
      var border_top, bottomed, fixed, height, last_pos, offset, padding_bottom, padding_top, parent, parent_height, parent_top, spacer,
        _this = this;
      parent = elm.parent(parent_selector);
      border_top = parseInt(parent.css("border-top-width"), 10);
      padding_top = parseInt(parent.css("padding-top"), 10);
      padding_bottom = parseInt(parent.css("padding-bottom"));
      parent_top = parent.offset().top + border_top + padding_top;
      parent_height = parent.height();
      height = elm.outerHeight(true);
      console.log(elm, "height:", height, "parent height:", parent_height);
      if (height === parent_height) {
        return;
      }
      spacer = $("<div />").css({
        width: elm.outerWidth(true),
        height: height,
        display: elm.css("display"),
        float: elm.css("float")
      });
      fixed = false;
      bottomed = false;
      last_pos = void 0;
      offset = 0;
      return win.on("scroll", function(e) {
        var before, delta, scroll, win_height;
        scroll = win.scrollTop();
        if (last_pos != null) {
          delta = scroll - last_pos;
        }
        last_pos = scroll;
        if (fixed) {
          if (scroll < parent_top) {
            fixed = false;
            offset = 0;
            spacer.detach();
            elm.css({
              position: ""
            }).removeClass(sticky_class);
          }
          if (scroll + height + offset > parent_height + parent_top) {
            if (!bottomed) {
              bottomed = true;
              if (parent.css("position") === "static") {
                parent.css({
                  position: "relative"
                });
              }
              elm.css({
                position: "absolute",
                bottom: padding_bottom,
                top: ""
              });
            }
          } else {
            if (bottomed) {
              bottomed = false;
              elm.css({
                position: "fixed",
                bottom: "",
                top: 0
              });
            }
          }
          win_height = win.height();
          if (height > win_height) {
            if (!bottomed) {
              offset -= delta;
              before = offset;
              offset = Math.max(win_height - height, offset);
              offset = Math.min(0, offset);
              return elm.css({
                top: offset + "px"
              });
            }
          }
        } else {
          if (scroll > parent_top) {
            fixed = true;
            return elm.css({
              position: "fixed",
              top: offset
            }).addClass(sticky_class).after(spacer);
          }
        }
      });
    };
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      elm = this[_i];
      _fn($(elm));
    }
    return this;
  };

}).call(this);
